#include <iostream>
#include <vector>
#include <queue>
#include <deque>
#include <unordered_map>
#include <cmath>

using namespace std;

/**
 * @author: batteria
 * @version: 1.0
 * @since: 2021/1/20
 * @description: 200.number-of-islands
 *
 * !!!!标记数选用也会导致答案的误差 ascii char表示有负数！！
 *
 * 方法二：沉岛法
 */
int numIslands(vector<vector<char>>& grid) {
    int ans = 0, size = grid.size();
    char current = 'A';
    unordered_map<char, char> M;
    for (int i = 0; i < grid.size(); i++) {
        for (int j = 0; j < grid[0].size(); j++) {
            if (grid[i][j] == '0') continue;
            char left = '0', top = '0';
            if (i - 1 >= 0) top = grid[i-1][j];
            if (j - 1 >= 0) left = grid[i][j - 1];
            if (M[top] > 0) top = M[top];
            if (M[left] > 0) left = M[left];

            if (left == '0' && top == '0') {
                grid[i][j] = current++;
                ans++;
            } else if (left != '0' && top == '0') {
                grid[i][j] = left;
            } else if (left == '0' && top != '0') {
                grid[i][j] = top;
            } else {
                if (left == top) {
                    grid[i][j] = left;
                    continue;
                }
                if (left < top) {
                    grid[i][j] = left;
                    M[top] = left;
                } else {
                    grid[i][j] = top;
                    M[left] = top;
                }

                ans--;
            }
        }
    }

    return ans;
}

int main() {
//    vector<vector<char>> grid{{'1','1','1','1','0'},{'1','1','0','1','0'},{'1','1','0','0','0'},{'0','0','0','0','0'}};
//    int a = numIslands(grid);
//    vector<vector<char>> grid1{{'1','1','0','0','0'},{'1','1','0','0','0'},{'0','0','1','0','0'},{'0','0','0','1','1'}};
//    int a1 = numIslands(grid1);
//    vector<vector<char>> grid2{{'1','0','1','1','0','1','1'}};
//    int a2 = numIslands(grid2);
//    vector<vector<char>> grid3{{'1','0','1','1','1'}, {'1','0','1','0','1'}, {'1','1','1','0','1'}};
//    int a3 = numIslands(grid3);
//    vector<vector<char>> grid4{{'1','1','1'}, {'0','1','0'}, {'1','1','1'}};
//    int a4 = numIslands(grid4);
//    vector<vector<char>> grid5{{'1','1','1','1','1','1','1'},{'0','0','0','0','0','0','1'},{'1','1','1','1','1','0','1'},{'1','0','0','0','1','0','1'},{'1','0','1','0','1','0','1'},{'1','0','1','1','1','0','1'},{'1','1','1','1','1','1','1'}};
//    int a5 = numIslands(grid5);
    vector<vector<char>> grid6{{'0','1','1','1','1','0','0','1','0','1','1','1','1','1','1','0','0','1','1','0'},{'0','0','0','0','0','0','1','0','1','0','1','0','0','1','1','0','0','0','1','0'},{'0','1','0','1','0','1','0','1','0','0','1','1','1','0','0','0','0','0','0','1'},{'1','0','0','1','1','1','1','1','0','1','0','0','0','0','1','0','1','0','1','0'},{'0','1','0','0','0','0','1','0','0','0','0','1','0','0','1','0','1','1','1','0'},{'0','0','0','0','0','0','0','1','0','1','1','0','0','1','1','0','0','1','0','1'},{'0','0','1','1','1','1','0','1','1','1','1','0','0','0','1','0','1','0','1','1'},{'1','1','1','1','0','0','1','0','1','0','0','0','0','0','0','1','1','1','0','1'},{'1','0','0','0','1','1','0','0','1','0','1','1','0','0','0','1','0','0','0','0'},{'1','0','0','1','0','1','0','1','0','0','1','1','1','0','0','0','0','0','1','0'},{'0','0','0','1','0','0','1','0','0','0','0','0','0','1','0','1','0','0','1','1'},{'0','1','0','0','1','1','1','0','1','1','1','0','0','0','1','0','1','0','0','0'},{'1','1','1','0','1','1','0','1','0','1','0','1','1','0','0','0','1','0','0','0'},{'0','1','1','0','1','0','0','1','1','0','1','1','0','1','1','0','1','1','0','0'},{'0','1','1','0','0','1','0','0','0','1','0','1','0','0','0','0','0','0','1','1'},{'0','0','1','0','0','0','1','1','0','1','1','1','1','0','1','0','1','0','1','0'},{'1','0','0','0','1','0','1','0','1','0','0','0','0','1','1','0','0','0','0','0'},{'1','0','0','1','1','0','0','1','1','0','0','0','1','0','0','0','1','1','1','0'},{'0','1','0','1','1','0','0','0','1','1','0','0','1','1','1','0','0','1','1','0'},{'0','0','1','0','1','0','0','0','0','0','0','0','0','1','0','1','0','0','1','0'}};
    int a6 = numIslands(grid6);
    for (int i = 0; i < grid6.size(); i++) {
        for (int j = 0; j < grid6[0].size(); j++) {
            cout<<grid6[i][j]<<" ";
        }
        cout<<endl;
    }
    return 0;
}